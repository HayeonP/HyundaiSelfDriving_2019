// Generated by gencpp from file v2x_msgs/v2x_info.msg
// DO NOT EDIT!


#ifndef V2X_MSGS_MESSAGE_V2X_INFO_H
#define V2X_MSGS_MESSAGE_V2X_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace v2x_msgs
{
template <class ContainerAllocator>
struct v2x_info_
{
  typedef v2x_info_<ContainerAllocator> Type;

  v2x_info_()
    : header()
    , msg_type(0)
    , map_id_region(0)
    , map_refpoint_lat(0)
    , map_refpoint_lon(0)
    , map_speed_limit(0)
    , map_g_cnt(0)
    , map_g_id()
    , map_g_nodelist_cnt()
    , map_g_nodelist_xy()
    , map_g_connectsto_cnt()
    , map_g_connectsto_lane()
    , spat_id_region(0)
    , spat_movement_cnt(0)
    , spat_movement_name()
    , spat_eventstate()
    , spat_minendtime()
    , bsm_id()
    , bsm_lat(0)
    , bsm_lon(0)
    , bsm_angle(0)
    , bsm_size_width(0)
    , bsm_size_length(0)
    , bsm_classification(0)
    , tim_dataframe_cnt(0)
    , tim_starttime()
    , tim_durationtime()
    , tim_anchor_lat()
    , tim_anchor_lon()
    , tim_lanewidth()
    , tim_direction()
    , tim_nodelist_xy_cnt()
    , tim_nodelist_xy_latlon()
    , tim_content()
    , tim_speedlimit()  {
    }
  v2x_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , msg_type(0)
    , map_id_region(0)
    , map_refpoint_lat(0)
    , map_refpoint_lon(0)
    , map_speed_limit(0)
    , map_g_cnt(0)
    , map_g_id(_alloc)
    , map_g_nodelist_cnt(_alloc)
    , map_g_nodelist_xy(_alloc)
    , map_g_connectsto_cnt(_alloc)
    , map_g_connectsto_lane(_alloc)
    , spat_id_region(0)
    , spat_movement_cnt(0)
    , spat_movement_name(_alloc)
    , spat_eventstate(_alloc)
    , spat_minendtime(_alloc)
    , bsm_id(_alloc)
    , bsm_lat(0)
    , bsm_lon(0)
    , bsm_angle(0)
    , bsm_size_width(0)
    , bsm_size_length(0)
    , bsm_classification(0)
    , tim_dataframe_cnt(0)
    , tim_starttime(_alloc)
    , tim_durationtime(_alloc)
    , tim_anchor_lat(_alloc)
    , tim_anchor_lon(_alloc)
    , tim_lanewidth(_alloc)
    , tim_direction(_alloc)
    , tim_nodelist_xy_cnt(_alloc)
    , tim_nodelist_xy_latlon(_alloc)
    , tim_content(_alloc)
    , tim_speedlimit(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _msg_type_type;
  _msg_type_type msg_type;

   typedef int32_t _map_id_region_type;
  _map_id_region_type map_id_region;

   typedef int32_t _map_refpoint_lat_type;
  _map_refpoint_lat_type map_refpoint_lat;

   typedef int32_t _map_refpoint_lon_type;
  _map_refpoint_lon_type map_refpoint_lon;

   typedef int32_t _map_speed_limit_type;
  _map_speed_limit_type map_speed_limit;

   typedef int32_t _map_g_cnt_type;
  _map_g_cnt_type map_g_cnt;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _map_g_id_type;
  _map_g_id_type map_g_id;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _map_g_nodelist_cnt_type;
  _map_g_nodelist_cnt_type map_g_nodelist_cnt;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _map_g_nodelist_xy_type;
  _map_g_nodelist_xy_type map_g_nodelist_xy;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _map_g_connectsto_cnt_type;
  _map_g_connectsto_cnt_type map_g_connectsto_cnt;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _map_g_connectsto_lane_type;
  _map_g_connectsto_lane_type map_g_connectsto_lane;

   typedef int32_t _spat_id_region_type;
  _spat_id_region_type spat_id_region;

   typedef int32_t _spat_movement_cnt_type;
  _spat_movement_cnt_type spat_movement_cnt;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _spat_movement_name_type;
  _spat_movement_name_type spat_movement_name;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _spat_eventstate_type;
  _spat_eventstate_type spat_eventstate;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _spat_minendtime_type;
  _spat_minendtime_type spat_minendtime;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _bsm_id_type;
  _bsm_id_type bsm_id;

   typedef int32_t _bsm_lat_type;
  _bsm_lat_type bsm_lat;

   typedef int32_t _bsm_lon_type;
  _bsm_lon_type bsm_lon;

   typedef int32_t _bsm_angle_type;
  _bsm_angle_type bsm_angle;

   typedef int32_t _bsm_size_width_type;
  _bsm_size_width_type bsm_size_width;

   typedef int32_t _bsm_size_length_type;
  _bsm_size_length_type bsm_size_length;

   typedef int32_t _bsm_classification_type;
  _bsm_classification_type bsm_classification;

   typedef int32_t _tim_dataframe_cnt_type;
  _tim_dataframe_cnt_type tim_dataframe_cnt;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tim_starttime_type;
  _tim_starttime_type tim_starttime;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tim_durationtime_type;
  _tim_durationtime_type tim_durationtime;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tim_anchor_lat_type;
  _tim_anchor_lat_type tim_anchor_lat;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tim_anchor_lon_type;
  _tim_anchor_lon_type tim_anchor_lon;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tim_lanewidth_type;
  _tim_lanewidth_type tim_lanewidth;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tim_direction_type;
  _tim_direction_type tim_direction;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tim_nodelist_xy_cnt_type;
  _tim_nodelist_xy_cnt_type tim_nodelist_xy_cnt;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tim_nodelist_xy_latlon_type;
  _tim_nodelist_xy_latlon_type tim_nodelist_xy_latlon;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tim_content_type;
  _tim_content_type tim_content;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _tim_speedlimit_type;
  _tim_speedlimit_type tim_speedlimit;



  enum {
    BSM_MSG_TYPE = 1,
    SPAT_MSG_TYPE = 2,
    TIM_MSG_TYPE = 3,
    MAP_MSG_TYPE = 4,
  };


  typedef boost::shared_ptr< ::v2x_msgs::v2x_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::v2x_msgs::v2x_info_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_info_

typedef ::v2x_msgs::v2x_info_<std::allocator<void> > v2x_info;

typedef boost::shared_ptr< ::v2x_msgs::v2x_info > v2x_infoPtr;
typedef boost::shared_ptr< ::v2x_msgs::v2x_info const> v2x_infoConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::v2x_msgs::v2x_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::v2x_msgs::v2x_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace v2x_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'v2x_msgs': ['/home/autoware/vision_ws/src/v2x/v2x_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::v2x_msgs::v2x_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::v2x_msgs::v2x_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::v2x_msgs::v2x_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::v2x_msgs::v2x_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2x_msgs::v2x_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2x_msgs::v2x_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::v2x_msgs::v2x_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d901339c101aa3472bf57a8feba3d77";
  }

  static const char* value(const ::v2x_msgs::v2x_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d901339c101aa34ULL;
  static const uint64_t static_value2 = 0x72bf57a8feba3d77ULL;
};

template<class ContainerAllocator>
struct DataType< ::v2x_msgs::v2x_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "v2x_msgs/v2x_info";
  }

  static const char* value(const ::v2x_msgs::v2x_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::v2x_msgs::v2x_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
int32 msg_type\n\
int32 BSM_MSG_TYPE = 1\n\
int32 SPAT_MSG_TYPE = 2\n\
int32 TIM_MSG_TYPE = 3\n\
int32 MAP_MSG_TYPE = 4\n\
# map\n\
int32 map_id_region\n\
int32 map_refpoint_lat\n\
int32 map_refpoint_lon\n\
int32 map_speed_limit\n\
\n\
int32 map_g_cnt\n\
int32[] map_g_id\n\
int32[] map_g_nodelist_cnt\n\
int32[] map_g_nodelist_xy #xy, xy, xy...\n\
int32[] map_g_connectsto_cnt\n\
int32[] map_g_connectsto_lane\n\
\n\
# SPaT\n\
int32 spat_id_region\n\
int32 spat_movement_cnt\n\
string[] spat_movement_name # assume that movement state contains only one movement event\n\
int32[] spat_eventstate #0 : unavaliable/ 3: stop and remain/ 5 : permissive_movement_allowed\n\
int32[] spat_minendtime\n\
    \n\
# BSM\n\
int32[] bsm_id\n\
int32 bsm_lat\n\
int32 bsm_lon\n\
int32 bsm_angle\n\
int32 bsm_size_width\n\
int32 bsm_size_length\n\
int32 bsm_classification #69 for ambulance, 0 for else\n\
\n\
# TIM\n\
int32 tim_dataframe_cnt\n\
int32[] tim_starttime\n\
int32[] tim_durationtime\n\
int32[] tim_anchor_lat\n\
int32[] tim_anchor_lon\n\
int32[] tim_lanewidth\n\
int32[] tim_direction\n\
int32[] tim_nodelist_xy_cnt\n\
int32[] tim_nodelist_xy_latlon # lat, lon, ...\n\
int32[] tim_content\n\
int32[] tim_speedlimit\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::v2x_msgs::v2x_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::v2x_msgs::v2x_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.msg_type);
      stream.next(m.map_id_region);
      stream.next(m.map_refpoint_lat);
      stream.next(m.map_refpoint_lon);
      stream.next(m.map_speed_limit);
      stream.next(m.map_g_cnt);
      stream.next(m.map_g_id);
      stream.next(m.map_g_nodelist_cnt);
      stream.next(m.map_g_nodelist_xy);
      stream.next(m.map_g_connectsto_cnt);
      stream.next(m.map_g_connectsto_lane);
      stream.next(m.spat_id_region);
      stream.next(m.spat_movement_cnt);
      stream.next(m.spat_movement_name);
      stream.next(m.spat_eventstate);
      stream.next(m.spat_minendtime);
      stream.next(m.bsm_id);
      stream.next(m.bsm_lat);
      stream.next(m.bsm_lon);
      stream.next(m.bsm_angle);
      stream.next(m.bsm_size_width);
      stream.next(m.bsm_size_length);
      stream.next(m.bsm_classification);
      stream.next(m.tim_dataframe_cnt);
      stream.next(m.tim_starttime);
      stream.next(m.tim_durationtime);
      stream.next(m.tim_anchor_lat);
      stream.next(m.tim_anchor_lon);
      stream.next(m.tim_lanewidth);
      stream.next(m.tim_direction);
      stream.next(m.tim_nodelist_xy_cnt);
      stream.next(m.tim_nodelist_xy_latlon);
      stream.next(m.tim_content);
      stream.next(m.tim_speedlimit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::v2x_msgs::v2x_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::v2x_msgs::v2x_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "msg_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.msg_type);
    s << indent << "map_id_region: ";
    Printer<int32_t>::stream(s, indent + "  ", v.map_id_region);
    s << indent << "map_refpoint_lat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.map_refpoint_lat);
    s << indent << "map_refpoint_lon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.map_refpoint_lon);
    s << indent << "map_speed_limit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.map_speed_limit);
    s << indent << "map_g_cnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.map_g_cnt);
    s << indent << "map_g_id[]" << std::endl;
    for (size_t i = 0; i < v.map_g_id.size(); ++i)
    {
      s << indent << "  map_g_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.map_g_id[i]);
    }
    s << indent << "map_g_nodelist_cnt[]" << std::endl;
    for (size_t i = 0; i < v.map_g_nodelist_cnt.size(); ++i)
    {
      s << indent << "  map_g_nodelist_cnt[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.map_g_nodelist_cnt[i]);
    }
    s << indent << "map_g_nodelist_xy[]" << std::endl;
    for (size_t i = 0; i < v.map_g_nodelist_xy.size(); ++i)
    {
      s << indent << "  map_g_nodelist_xy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.map_g_nodelist_xy[i]);
    }
    s << indent << "map_g_connectsto_cnt[]" << std::endl;
    for (size_t i = 0; i < v.map_g_connectsto_cnt.size(); ++i)
    {
      s << indent << "  map_g_connectsto_cnt[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.map_g_connectsto_cnt[i]);
    }
    s << indent << "map_g_connectsto_lane[]" << std::endl;
    for (size_t i = 0; i < v.map_g_connectsto_lane.size(); ++i)
    {
      s << indent << "  map_g_connectsto_lane[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.map_g_connectsto_lane[i]);
    }
    s << indent << "spat_id_region: ";
    Printer<int32_t>::stream(s, indent + "  ", v.spat_id_region);
    s << indent << "spat_movement_cnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.spat_movement_cnt);
    s << indent << "spat_movement_name[]" << std::endl;
    for (size_t i = 0; i < v.spat_movement_name.size(); ++i)
    {
      s << indent << "  spat_movement_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.spat_movement_name[i]);
    }
    s << indent << "spat_eventstate[]" << std::endl;
    for (size_t i = 0; i < v.spat_eventstate.size(); ++i)
    {
      s << indent << "  spat_eventstate[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.spat_eventstate[i]);
    }
    s << indent << "spat_minendtime[]" << std::endl;
    for (size_t i = 0; i < v.spat_minendtime.size(); ++i)
    {
      s << indent << "  spat_minendtime[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.spat_minendtime[i]);
    }
    s << indent << "bsm_id[]" << std::endl;
    for (size_t i = 0; i < v.bsm_id.size(); ++i)
    {
      s << indent << "  bsm_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.bsm_id[i]);
    }
    s << indent << "bsm_lat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bsm_lat);
    s << indent << "bsm_lon: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bsm_lon);
    s << indent << "bsm_angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bsm_angle);
    s << indent << "bsm_size_width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bsm_size_width);
    s << indent << "bsm_size_length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bsm_size_length);
    s << indent << "bsm_classification: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bsm_classification);
    s << indent << "tim_dataframe_cnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tim_dataframe_cnt);
    s << indent << "tim_starttime[]" << std::endl;
    for (size_t i = 0; i < v.tim_starttime.size(); ++i)
    {
      s << indent << "  tim_starttime[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tim_starttime[i]);
    }
    s << indent << "tim_durationtime[]" << std::endl;
    for (size_t i = 0; i < v.tim_durationtime.size(); ++i)
    {
      s << indent << "  tim_durationtime[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tim_durationtime[i]);
    }
    s << indent << "tim_anchor_lat[]" << std::endl;
    for (size_t i = 0; i < v.tim_anchor_lat.size(); ++i)
    {
      s << indent << "  tim_anchor_lat[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tim_anchor_lat[i]);
    }
    s << indent << "tim_anchor_lon[]" << std::endl;
    for (size_t i = 0; i < v.tim_anchor_lon.size(); ++i)
    {
      s << indent << "  tim_anchor_lon[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tim_anchor_lon[i]);
    }
    s << indent << "tim_lanewidth[]" << std::endl;
    for (size_t i = 0; i < v.tim_lanewidth.size(); ++i)
    {
      s << indent << "  tim_lanewidth[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tim_lanewidth[i]);
    }
    s << indent << "tim_direction[]" << std::endl;
    for (size_t i = 0; i < v.tim_direction.size(); ++i)
    {
      s << indent << "  tim_direction[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tim_direction[i]);
    }
    s << indent << "tim_nodelist_xy_cnt[]" << std::endl;
    for (size_t i = 0; i < v.tim_nodelist_xy_cnt.size(); ++i)
    {
      s << indent << "  tim_nodelist_xy_cnt[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tim_nodelist_xy_cnt[i]);
    }
    s << indent << "tim_nodelist_xy_latlon[]" << std::endl;
    for (size_t i = 0; i < v.tim_nodelist_xy_latlon.size(); ++i)
    {
      s << indent << "  tim_nodelist_xy_latlon[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tim_nodelist_xy_latlon[i]);
    }
    s << indent << "tim_content[]" << std::endl;
    for (size_t i = 0; i < v.tim_content.size(); ++i)
    {
      s << indent << "  tim_content[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tim_content[i]);
    }
    s << indent << "tim_speedlimit[]" << std::endl;
    for (size_t i = 0; i < v.tim_speedlimit.size(); ++i)
    {
      s << indent << "  tim_speedlimit[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.tim_speedlimit[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // V2X_MSGS_MESSAGE_V2X_INFO_H
